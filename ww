#!/usr/bin/env bash
# Usage: ww -h
# e.g.: ww -pn firefox -d firefox

# set -o nounset 대응
TOGGLE="false"
PROCESS_NAME=""
FILTERCLASS=""
FILTERTITLE=""
HELP=""

POSITIONAL=()
while [[ $# -gt 0 ]]; do
	key="$1"

	case $key in
	-d | --desktop)
		DESKTOP="$2"
		shift # past argument
		shift # past value
		;;
	-pn | --process-name)
		PROCESS_NAME="$2"
		shift # past argument
		shift # past value
		;;
	-fc | --filter-class)
		FILTERCLASS="$2"
		shift # past argument
		shift # past value
		;;
	-ft | --filter-title)
		FILTERTITLE="$2"
		shift # past argument
		shift # past value
		;;
	-t | --toggle)
		TOGGLE="true"
		shift # past argument
		;;
	-h | --help)
		HELP="1"
		shift # past argument
		shift # past value
		;;
	*)                  # unknown option
		POSITIONAL+=("$1") # save it in an array for later
		shift              # past argument
		;;
	esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# use desktop entries name for filtering (when $FILTERTITLE is not provided)
[ -z "$FILTERTITLE" ] && [ -z "$FILTERCLASS" ] && [ -n "$DESKTOP" ] && FILTERCLASS="$DESKTOP"

if [ -n "$HELP" ]; then
	cat <<EOF
ww. Utility to raise or jump an applications in KDE. It interacts with KWin using KWin scripts and it is compatible with X11 and Wayland

Paramaters:

-h  --help                show this help
-fc --filter-class        filter by window class
-ft --filter-title        filter by window title (caption)
-t  --toggle              also minimize the window if it is already active
-pn --process-name        process name to check if running
-d  --desktop             desktop entry name to be executed by gtk-launch (do not include ".desktop" suffix)
EOF
	exit 0
fi

# Check condition
if [ -z "$PROCESS_NAME" ]; then
	echo You need to specify a process name. By -pn.
	exit 1
fi

if [ -z "$FILTERCLASS" ] && [ -z "$FILTERTITLE" ]; then
	echo You need to specify a window filter. Either by class -fc or by title -ft
	exit 1
fi

SCRIPT_TEMPLATE=$(
	cat <<EOF
function kwinactivateclient(clientClass, clientCaption, toggle) {
    var clients = workspace.windowList();
    var compareToCaption = new RegExp(clientCaption || '', 'i');
    var compareToClass = clientClass;
    var isCompareToClass = clientClass.length > 0
    for (var i = 0; i < clients.length; i++) {
        var client = clients[i];
        var classCompare = (isCompareToClass && client.resourceClass == compareToClass)
        var captionCompare = (!isCompareToClass && compareToCaption.exec(client.caption))
        if (classCompare || captionCompare) {
            if (workspace.activeWindow != client) {
                workspace.activeWindow = client;
            } else if (toggle) {
                client.minimized = true;
            }
            break;
        }
    }
}
kwinactivateclient('CLASS_NAME', 'CAPTION_NAME', TOGGLE);
EOF
)

CURRENT_SCRIPT_NAME=$(basename "$0")

# ensure the script file exists
function ensure_script {
	if [ ! -f SCRIPT_PATH ]; then
		if [ ! -d "$SCRIPT_FOLDER" ]; then
			mkdir -p "$SCRIPT_FOLDER"
		fi
		SCRIPT_CONTENT=${SCRIPT_TEMPLATE/CLASS_NAME/$1}
		SCRIPT_CONTENT=${SCRIPT_CONTENT/CAPTION_NAME/$2}
		SCRIPT_CONTENT=${SCRIPT_CONTENT/TOGGLE/$3}
		#if [ "$1" == "class" ]; then
		#SCRIPT_CONTENT=${SCRIPT_CLASS_NAME/REPLACE_ME/$2}
		#else
		#SCRIPT_CONTENT=${SCRIPT_CAPTION/REPLACE_ME/$2}
		#fi
		echo "$SCRIPT_CONTENT" >"$SCRIPT_PATH"
	fi
}

IS_RUNNING=$(pgrep -o -a -f "$PROCESS_NAME" | grep -c -v "$CURRENT_SCRIPT_NAME" || true)

if [ "$IS_RUNNING" != 0 ] || [ -n "$FILTERTITLE" ]; then
	SCRIPT_FOLDER="${XDG_CACHE_HOME:-${HOME}/.cache}/wwscripts"

	SCRIPT_NAME="$(echo "$FILTERCLASS$FILTERTITLE" | xxhsum -H64 | head -c 16).js"
	SCRIPT_PATH="$SCRIPT_FOLDER/$SCRIPT_NAME"
	ensure_script "$FILTERCLASS" "$FILTERTITLE" "$TOGGLE"

	# install the script
	ID=$(dbus-send --session --print-reply --dest=org.kde.KWin /Scripting org.kde.kwin.Scripting.loadScript "string:$SCRIPT_PATH" "string:$SCRIPT_NAME" | awk 'END {print $2}')

	# run the script
	dbus-send --session --print-reply --dest=org.kde.KWin /Scripting/Script"$ID" org.kde.kwin.Script.run >/dev/null 2>&1 || true
	dbus-send --session --print-reply --dest=org.kde.KWin /Scripting/Script"$ID" org.kde.kwin.Scripting.run >/dev/null 2>&1 || true
	# stop the script
	dbus-send --session --print-reply --dest=org.kde.KWin /Scripting/Script"$ID" org.kde.kwin.Script.stop >/dev/null 2>&1 || true
	dbus-send --session --print-reply --dest=org.kde.KWin /Scripting/Script"$ID" org.kde.kwin.Scripting.stop >/dev/null 2>&1 || true

	# uninstall the script
	dbus-send --session --print-reply --dest=org.kde.KWin /Scripting org.kde.kwin.Scripting.unloadScript "string:$SCRIPT_NAME" >/dev/null 2>&1 || true

else
	if [ -z "$DESKTOP" ]; then
		echo "The program is not running and the desktop name is not provided to launch a new instance."
		exit 0
	fi
	echo "Launching new instance"
	notify-send -u low -t 800 "Launching new instance of ${DESKTOP}"
	exec gtk-launch "${DESKTOP}" >/dev/null 2>&1 &
fi
